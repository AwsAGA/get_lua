<?php

ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

define('TIMEZONE', 'Europe/Madrid');

date_default_timezone_set(TIMEZONE);

class REDLINE{
  
  // Constructor
  function __construct() {
    $this->cache_time 	=  60 * 60 * 5; // 60 Seconds * 60 Minutes * 5 Hours
    $this->usercode 	=  '5129268187'; // usercode from url
    $this->mac			=  '3034D2233B4F'; // mac from url
    $this->check 		=  '4265003037'; // check from url
    $this->customer 	=  'redline'; // check from url
    $this->user_agent	=  'REDLINECLIENT GOLDENBOX V2.8.89'; // check from url
    $this->time = time();
    $this->headers = array();
  }
  
  // Methods
  
  public function build_headers($operation = "mac"){
    unset($this->headers);
    $array = array();
    $array['User-Agent'] = $this->user_agent;
    $array['Cache-Control'] = 'no-cache, no-store';
    foreach ($array as $key => $val){
      $this->headers[] = "$key: $val";
    }		
  }  
  
  public function get_user_agent(){
    return $this->user_agent;	
  }
  
  private function curl($url, $post = 0 , $custom_ips = false)
  {
	$this->build_headers();
    $ch = @curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_FRESH_CONNECT, 1);
    curl_setopt($ch, CURLOPT_HTTPHEADER, $this->headers);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    if ($post) {
      curl_setopt($ch, CURLOPT_POST, TRUE);
      curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($post));
    }
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
    curl_setopt($ch, CURLOPT_TIMEOUT, 60);
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 60);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, TRUE);
    $content = curl_exec($ch);
    curl_close($ch);    
    return $content;
  }
  
  private function contains($needle, $haystack)
  {
    return strpos($haystack, $needle) !== false;
  }
  
  private function cut_str($str, $left, $right){
    $str = substr(stristr($str, $left) , strlen($left));
    $leftLen = strlen(stristr($str, $right));
    $leftLen = $leftLen ? -($leftLen) : strlen($str);
    return substr($str, 0, $leftLen);
  }

  
  public function get_all_channels(){
    $data = $this->curl("http://access.richtv1.com/ch.php?usercode={$this->usercode}&mac={$this->mac}&customer={$this->customer}&check={$this->check}&{$this->time}");
    return $data;
  }

  public function check_token(){
    $is_403 = true;
    $channels = $this->get_all_channels();
    $channel = json_decode($channels, true)[0]['link'];
    $data = $this->curl($channel);
    if($this->contains('403',$data)){
      while($is_403){
        $channels = $this->get_all_channels();
        $channel = json_decode($channels, true)[0]['link'];
        $data = $this->curl($channel);
        if(!$this->contains('403',$data)){
          $is_403 = false;
          break;
        }
      }
    }

    // إذا كان التوكن موجودًا، قم بطباعته
    $link_components = parse_url($channel);
    if (isset($link_components['query'])) {
      parse_str($link_components['query'], $query_params);
      if (isset($query_params['token'])) {
          echo "" . $query_params['token'];
      } else {
          echo "Token not found!";
      }
    } else {
        echo "Query string not found!";
    }
  }
}

// استدعاء الكلاس
$redline = new REDLINE();

// التحقق من صحة التوكن
$redline->check_token();

?>
